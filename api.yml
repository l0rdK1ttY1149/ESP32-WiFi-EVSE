openapi: 3.0.2
info:
  title: OpenEVSE WiFi API
  description: The API for the OpenEVSE WiFi module
  version: '1.0'
  contact:
    email: jeremy@bigjungle.net
    name: Jeremy Poulter
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://openevse.local'
  - url: 'http://localhost:8080'
paths:
  /status:
    get:
      operationId: getStatus
      summary: Get the status of the EVSE
      description: |
        The status endpoint can be called to get the status of the EVSE.

        While it is posible to poll this endpoint, the recomendatoin is to retrieve the initial 
        state then use the [/ws](#statusUpdates) 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/Status.yaml
      tags:
        - status
  /ws:
    get:
      operationId: statusUpdates
      summary: WebSocket endpoint that streams updates to the EVSE status
      description: |
        As the state changes on the EVSE a websocket frame will be sent over the socket. 
        The frame will contain a JSON document conntaining only the updated state.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/Status.yaml
      tags:
        - status
  /config:
    get:
      operationId: getConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/Config.yaml
              examples: {}
      summary: Get the EVSE configuration
      description: ''
      tags:
        - config
    post:
      operationId: updateConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/Config.yaml
      summary: Update the EVSE configuration
      tags:
        - config
  /override:
    get:
      responses:
        '200':
          description: Manual overide is active
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        '404':
          description: Manual overide is not active
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      operationId: getManualOverride
      tags:
        - override
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      operationId: setManualOverride
      tags:
        - override
    patch:
      description: Toggle the manual override
      responses:
        '200':
          description: OK
      operationId: toggleManualOverride
      tags:
        - override
    delete:
      description: Clears the manual override
      responses:
        '200':
          description: OK
      operationId: clearManualOverride
      tags:
        - override
  /claims:
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Claims'
      operationId: listClaims
      tags:
        - claims
  '/claims/{client}':
    get:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
      parameters: []
      operationId: getClaim
      tags:
        - claims
    post:
      description: Make/Update a claim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      operationId: setClaim
      summary: Make/Update a claim
      tags:
        - claims
    delete:
      description: Release a claim
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      operationId: releaseClaim
      summary: Release a claim
      tags:
        - claims
    parameters:
      - schema:
          type: integer
        name: client
        in: path
        required: true
        description: 'The client ID, defined by [OpenEVSE](https://github.com/OpenEVSE/ESP32_WiFi_V4.x/blob/master/src/evse_man.h#L25)'
  /schedule:
    get:
      summary: Get the current list of events
      description: This will get a complete list of events in the schedule
      responses:
        '200':
          description: List of the schedule events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleEvent'
        '400':
          description: bad input parameter
      operationId: listSchedule
      tags:
        - schedule
    post:
      operationId: addInventory
      description: Perform multiple event updates
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleEvent'
        description: Inventory item to add
      tags:
        - schedule
      summary: Batch update schedule
  '/schedule/{id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Numeric ID of the event
    get:
      summary: Get a specific event details
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleEvent'
      operationId: getScheduleEvent
      tags:
        - schedule
    post:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleEvent'
        description: ''
      operationId: setScheduleEvent
      tags:
        - schedule
    delete:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples: {}
      operationId: removeScheduleEvent
      tags:
        - schedule
components:
  schemas:
    Properties:
      title: EVSE properties
      type: object
      properties:
        state:
          $ref: '#/components/schemas/EvseState'
        auto_release:
          type: boolean
          description: |
            `true` if the manual override is auto-released when the vehicle is
            disconnected, `false` if manual override will persist after vehicle
            disconnection.
    Message:
      title: Informational message
      type: object
      properties:
        msg:
          type: string
          description: The message
    ClientId:
      title: EVSE Client ID
      type: integer
      description: 'The client ID, defined by [OpenEVSE](https://github.com/OpenEVSE/ESP32_WiFi_V4.x/blob/master/src/evse_man.h#L25)'
    Claim:
      title: EVSE claim
      allOf:
        - type: object
          properties:
            client:
              $ref: '#/components/schemas/ClientId'
            priority:
              type: integer
              description: 'The priority of the claim, the higher the number the higher the priority'
        - $ref: '#/components/schemas/Properties'
    Claims:
      title: List of EVSE claims
      type: array
      items:
        $ref: '#/components/schemas/Claim'
    EvseState:
      title: EVSE state
      type: string
      enum:
        - active
        - disabled
    ScheduleEvent:
      type: object
      required:
        - state
        - time
        - days
      properties:
        id:
          type: integer
          example: 1
        state:
          $ref: '#/components/schemas/EvseState'
        time:
          type: string
          format: time
        days:
          type: array
          items:
            $ref: '#/components/schemas/Day'
    Day:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
tags:
  - name: claims
  - name: config
  - name: evse
  - name: override
  - name: schedule
  - name: status

static const char CONTENT_WIFI_PORTAL_JS[] PROGMEM = 
  "/* global ko, ConfigViewModel, StatusViewModel, WiFiScanViewModel, WiFiConfigViewModel, PasswordViewModel */\n"
  "/* exported WiFiPortalViewModel */\n"
  "\n"
  "function WiFiPortalViewModel(baseHost, basePort)\n"
  "{\n"
  "  \"use strict\";\n"
  "  var self = this;\n"
  "\n"
  "  self.baseHost = ko.observable(\"\" !== baseHost ? baseHost : \"openevse.local\");\n"
  "  self.basePort = ko.observable(basePort);\n"
  "  self.baseEndpoint = ko.pureComputed(function () {\n"
  "    var endpoint = \"//\" + self.baseHost();\n"
  "    if(80 !== self.basePort()) {\n"
  "      endpoint += \":\"+self.basePort();\n"
  "    }\n"
  "    return endpoint;\n"
  "  });\n"
  "\n"
  "  self.config = new ConfigViewModel(self.baseEndpoint);\n"
  "  self.status = new StatusViewModel(self.baseEndpoint);\n"
  "  self.scan = new WiFiScanViewModel(self.baseEndpoint);\n"
  "  self.wifi = new WiFiConfigViewModel(self.baseEndpoint, self.config, self.status, self.scan);\n"
  "\n"
  "  self.initialised = ko.observable(false);\n"
  "  self.updating = ko.observable(false);\n"
  "\n"
  "  self.wifi.selectedNet.subscribe((net) => {\n"
  "    if(false !== net) {\n"
  "      self.config.ssid(net.ssid());\n"
  "    }\n"
  "  });\n"
  "\n"
  "  self.config.ssid.subscribe((ssid) => {\n"
  "    self.wifi.setSsid(ssid);\n"
  "  });\n"
  "\n"
  "  // Show/hide password state\n"
  "  self.wifiPassword = new PasswordViewModel(self.config.pass);\n"
  "\n"
  "  var updateTimer = null;\n"
  "  var updateTime = 5 * 1000;\n"
  "\n"
  "  // -----------------------------------------------------------------------\n"
  "  // Initialise the app\n"
  "  // -----------------------------------------------------------------------\n"
  "  self.start = function () {\n"
  "    self.updating(true);\n"
  "    self.config.update(function () {\n"
  "      self.status.update(function () {\n"
  "        self.initialised(true);\n"
  "        updateTimer = setTimeout(self.update, updateTime);\n"
  "        self.updating(false);\n"
  "      });\n"
  "    });\n"
  "  };\n"
  "\n"
  "  // -----------------------------------------------------------------------\n"
  "  // Get the updated state from the ESP\n"
  "  // -----------------------------------------------------------------------\n"
  "  self.update = function () {\n"
  "    if (self.updating()) {\n"
  "      return;\n"
  "    }\n"
  "    self.updating(true);\n"
  "    if (null !== updateTimer) {\n"
  "      clearTimeout(updateTimer);\n"
  "      updateTimer = null;\n"
  "    }\n"
  "    self.status.update(function () {\n"
  "      updateTimer = setTimeout(self.update, updateTime);\n"
  "      self.updating(false);\n"
  "    });\n"
  "  };\n"
  "}\n"
  "\n"
  "\n"
  "/* global $, ko, WiFiPortalViewModel */\n"
  "\n"
  "(function() {\n"
  "  \"use strict\";\n"
  "\n"
  "  // Configure the endpoint to use, for dev you can change to point at a remote ESP\n"
  "  // and run the HTML/JS from file, no need to upload to the ESP to test\n"
  "\n"
  "  var baseHost = window.location.hostname;\n"
  "  // var baseHost = \"openevse.local\";\n"
  "  //var baseHost = \"192.168.4.1\";\n"
  "  //var baseHost = \"172.16.0.57\";\n"
  "\n"
  "  var basePort = window.location.port;\n"
  "\n"
  "  $(function () {\n"
  "  // Activates knockout.js\n"
  "    var openevse = new WiFiPortalViewModel(baseHost, basePort);\n"
  "    ko.applyBindings(openevse);\n"
  "    openevse.start();\n"
  "  });\n"
  "\n"
  "})();\n"
  "\n"
  "\n"
  "// Convert string to number, divide by scale, return result\n"
  "// as a string with specified precision\n"
  "/* exported scaleString */\n"
  "function scaleString(string, scale, precision) {\n"
  "  \"use strict\";\n"
  "  var tmpval = parseInt(string) / scale;\n"
  "  return tmpval.toFixed(precision);\n"
  "}\n";
